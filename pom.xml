<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.rbatllet</groupId>
    <artifactId>private-blockchain-cli</artifactId>
    <version>1.0.5</version>
    <packaging>jar</packaging>

    <name>Private Blockchain CLI</name>
    <description>Command Line Interface for Private Blockchain</description>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <maven.compiler.release>21</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <private-blockchain.version>1.0.5</private-blockchain.version>
        <picocli.version>4.7.7</picocli.version>
        <java.version>21</java.version>
        <junit-jupiter.version>5.14.0</junit-jupiter.version>
        <junit-platform.version>1.14.0</junit-platform.version>
        <mockito.version>5.20.0</mockito.version>
        <slf4j.version>2.0.17</slf4j.version>
        <log4j.version>2.25.2</log4j.version>

        <!-- Suppress Maven warnings -->
        <maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss</maven.build.timestamp.format>
        <maven.resolver.transport>wagon</maven.resolver.transport>
        <maven.wagon.http.retryHandler.count>3</maven.wagon.http.retryHandler.count>
        
        <!-- Plugin versions -->
        <maven-compiler-plugin.version>3.14.1</maven-compiler-plugin.version>
        <maven-shade-plugin.version>3.6.1</maven-shade-plugin.version>
        <maven-assembly-plugin.version>3.7.1</maven-assembly-plugin.version>
        <maven-jacoco-plugin.version>0.8.13</maven-jacoco-plugin.version>
        <maven-exec-plugin.version>3.5.1</maven-exec-plugin.version>
    </properties>

    <dependencies>
        <!-- Private Blockchain Core Library -->
        <dependency>
            <groupId>com.rbatllet</groupId>
            <artifactId>private-blockchain</artifactId>
            <version>${private-blockchain.version}</version>
            <exclusions>
                <!-- Exclude old SLF4J to use modern version -->
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-slf4j-impl</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Force modern logging dependencies -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j2-impl</artifactId>
            <version>${log4j.version}</version>
        </dependency>

        <!-- PicoCLI for command line interface -->
        <dependency>
            <groupId>info.picocli</groupId>
            <artifactId>picocli</artifactId>
            <version>${picocli.version}</version>
        </dependency>

        <!-- JUnit 5 for testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-console-standalone</artifactId>
            <version>${junit-platform.version}</version>
            <scope>test</scope>
        </dependency>
        
        <!-- Mockito for mocking in tests -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        
        <!-- Mockito JUnit Jupiter integration -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Maven Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <release>${maven.compiler.release}</release>
                    <showWarnings>false</showWarnings>
                    <showDeprecation>false</showDeprecation>
                </configuration>
            </plugin>

            <!-- Maven Exec Plugin for running tests via JUnit Platform Console Launcher -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${maven-exec-plugin.version}</version>
                <configuration>
                    <!-- Default configuration for running all tests -->
                    <executable>java</executable>
                    <commandlineArgs>${argLine} -cp "%classpath" org.junit.platform.console.ConsoleLauncher --scan-classpath --include-classname=".*Test.*" --details=tree</commandlineArgs>
                    <classpathScope>test</classpathScope>
                    <systemProperties>
                        <systemProperty>
                            <key>log4j2.configurationFile</key>
                            <value>classpath:${log4j2.configurationFile}</value>
                        </systemProperty>
                    </systemProperties>
                </configuration>
                <executions>
                    <execution>
                        <id>run-tests</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Maven Shade Plugin for executable JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <!-- Security files -->
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                        <!-- Module info files that cause warnings -->
                                        <exclude>module-info.class</exclude>
                                        <exclude>META-INF/versions/*/module-info.class</exclude>
                                        <!-- License and notice files that conflict -->
                                        <exclude>META-INF/LICENSE</exclude>
                                        <exclude>META-INF/LICENSE.txt</exclude>
                                        <exclude>META-INF/LICENSE.md</exclude>
                                        <exclude>META-INF/NOTICE</exclude>
                                        <exclude>META-INF/NOTICE.txt</exclude>
                                        <exclude>META-INF/NOTICE.md</exclude>
                                        <exclude>META-INF/DEPENDENCIES</exclude>
                                        <!-- Manifests from dependencies (let transformer create a new one) -->
                                        <exclude>META-INF/MANIFEST.MF</exclude>
                                    </excludes>
                                </filter>
                                <!-- Exclude log4j2.xml from dependency to avoid conflicts -->
                                <filter>
                                    <artifact>com.rbatllet:private-blockchain</artifact>
                                    <excludes>
                                        <exclude>log4j2.xml</exclude>
                                    </excludes>
                                </filter>
                                <!-- Keep our own MANIFEST.MF -->
                                <filter>
                                    <artifact>com.rbatllet:private-blockchain-cli</artifact>
                                    <includes>
                                        <include>**</include>
                                    </includes>
                                </filter>
                            </filters>
                            <transformers>
                                <!-- Main class transformer with proper manifest handling -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.rbatllet.blockchain.cli.BlockchainCLI</mainClass>
                                    <manifestEntries>
                                        <Built-By>Private Blockchain CLI</Built-By>
                                        <Implementation-Version>${project.version}</Implementation-Version>
                                        <Implementation-Title>${project.name}</Implementation-Title>
                                    </manifestEntries>
                                </transformer>
                                <!-- Services transformer for SPI -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                <!-- License aggregator -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer"/>
                            </transformers>
                            <finalName>blockchain-cli</finalName>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Maven Assembly Plugin as alternative JAR builder -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>${maven-assembly-plugin.version}</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>com.rbatllet.blockchain.cli.BlockchainCLI</mainClass>
                        </manifest>
                    </archive>
                    <finalName>blockchain-cli-assembly</finalName>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- JaCoCo Plugin for code coverage -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${maven-jacoco-plugin.version}</version>
                <configuration>
                    <!-- Configure exclusions for all executions -->
                    <excludes>
                        <!-- Exclude all demo classes -->
                        <exclude>demo/**/*</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>BUNDLE</element>
                                    <limits>
                                        <limit>
                                            <counter>COMPLEXITY</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.55</minimum>
                                        </limit>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.70</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
        <!-- Maven Profiles for different environments -->
    <profiles>
        <!-- Development profile - verbose logging -->
        <profile>
            <id>development</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <log4j2.configurationFile>log4j2.xml</log4j2.configurationFile>
            </properties>
        </profile>

        <!-- Production profile - minimal logging -->
        <profile>
            <id>production</id>
            <properties>
                <log4j2.configurationFile>log4j2-production.xml</log4j2.configurationFile>
            </properties>
        </profile>
    </profiles>
</project>
